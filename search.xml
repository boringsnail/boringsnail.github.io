<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MySQL系统表</title>
    <url>/year/01/13/MySQL%E7%B3%BB%E7%BB%9F%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="mysql系统表"><a href="#mysql系统表" class="headerlink" title="mysql系统表"></a>mysql系统表</h1><p>四个库</p>
<ul>
<li>information_schema 数据库元数据信息</li>
<li>mysql 数据库构建信息</li>
<li>performance_schema 数据库执行信息</li>
<li>sys 数据库配置信息</li>
</ul>
<h2 id="常用系统命令"><a href="#常用系统命令" class="headerlink" title="常用系统命令"></a>常用系统命令</h2><ul>
<li>desc tableName ， describe tableName, show columns from tableName [from databaesName]，show columns from databaseName.tableName –表字段信息</li>
<li>show create table tableName –表创建语句</li>
<li>show database databaseName –数据库创建语句</li>
<li>show table status from databaseName –显示库中表的情况</li>
<li>show tables [from databaseName] –显示数据库中所有表的表名</li>
<li>show databases –显示所有数据库名称</li>
<li>show processlist –显示系统中正在进行的所有进程，也就是正在执行的查询。</li>
<li>show table status [from databaseName] – 显示数据库中所有表的详情。</li>
<li>show grants for userName@localhost – 显示用户的授权语句</li>
<li>show index from [databaseName.]tableName –显示表的索引</li>
<li>show status –显示系统特定资源的信息，例如，正在运行的线程数量</li>
<li>show errors –显示最后一个执行语句产生的错误</li>
<li>show warngings –显示最后一个执行语句产生的错误，警告和通知。</li>
<li>show character set –显示可用字符集信息。</li>
</ul>
<h2 id="information-schema数据库"><a href="#information-schema数据库" class="headerlink" title="information_schema数据库"></a>information_schema数据库</h2><p>information_schema数据库框架信息数据库，存储了数据库元数据。<br>元数据是关于数据的数据，如数据库或表名，列的数据类型，或访问权限等。有些时候表述该信息的其他术语包括”数据词典“，”系统目录“。</p>
<ul>
<li>SCHEMATA表：纲要，框架。mysql实例所有数据库的信息。show databases结果取之于此表。</li>
<li>TABLES表: 所有数据库中表的信息（包括视图），show tables from databaseName的结果取之于此。</li>
<li>COLUMNS表：表中列的信息。show columns from databaseName.tableName结果取之于此。</li>
<li>STATISTICS表：统计表。表索引的信息。show index from databaseName.tableName结果取之于此。</li>
<li>USER_PRIVILEGES表: 用户权限表。源自于mysql.user授权表。</li>
<li>SCHEMA_PRIVILEGES表 : 数据库（框架，模式）权限。源自于mysql.db授权表。</li>
<li>TABLE_PRIVILEGES 表: 表权限。源自于mysql.tables_priv授权表。</li>
<li>CHARACTER_SETS表 : 字符集表。可用字符集信息。show character set结果取之于此表。</li>
<li>COLLATIONS表：核对。存储了各字符集的对照信息。</li>
<li>COLLATION_CHARACTER_SET_APPLICABILITY表 ： 指明了可用于校对的字符集。等效于show collation的前两个字段。</li>
<li>TABLE_CONSTRAINTS 表：存储了存在约束的表，以及表的约束类型。</li>
<li>KEY_COLUMN_USAGE表：具有约束的键列。</li>
<li>ROUTINES表： 关于存储子程序（存储程序和函数）信息。不包含自定义函数。与mysql.proc name像对应。</li>
<li>VIEWS表：视图信息。必须有show views权限才能查看。</li>
<li>TRIGGERS表：触发程序信息。必须有super权限才能查看。</li>
</ul>
<h3 id="TABLES表"><a href="#TABLES表" class="headerlink" title="TABLES表"></a>TABLES表</h3><p>mysql实例所有表的信息。show tables from databaseName的结果取之于此。<br>查找某个数据库的表：<code>SELECT * FROM information_schema.TABLES WHERE TABLE_SCHEMA=&#39;databaseName&#39;</code></p>
<p><strong>TABLES表的字段</strong></p>
<ul>
<li>TABLE_CATALOG –数据表登记目录</li>
<li>TABLE_SCHEMA –数据表所属的数据库名</li>
<li>TABLE_NAME – 表名称</li>
<li>TABLE_TYPE –表类型(system view | base table | view)</li>
<li>ENGINE –使用的数据库引擎(myisam | innodb | csv)</li>
<li>VERSION –版本,默认10.</li>
<li>ROW_FORMAT –行格式（compact | dynamic | fixed）</li>
<li>TABLE_ROWS –表里存了多少行数据</li>
<li>AVG_ROW_LENGTH –平均行长度</li>
<li>DATA_LENGTH –数据长度</li>
<li>MAX_DATA_LENGTH –最大数据长度</li>
<li>INDEX_LENGTH –索引长度</li>
<li>DATA_FREE</li>
<li>AUTO_INCREMENT –自增主键当前值</li>
<li>CREATE_TIME –表的创建时间</li>
<li>UPDATE_TIME –表的更新时间</li>
<li>TABLE_COLLATION –表的字符检验编码集</li>
<li>CHECKSUM –校验和</li>
<li>CREATE_OPTIONS –创建选项</li>
<li>TABLE_COMMENT –表的注释</li>
</ul>
<h3 id="COLUMNS表"><a href="#COLUMNS表" class="headerlink" title="COLUMNS表"></a>COLUMNS表</h3><p>表中列的信息。show columns from databaseName.tableName结果取之于此。<br>查找表中的列：<code>select * from information_schema.COLUMNS where TABLE_SCHEMA=&#39;databaseName&#39; and TABLE_NAME=&#39;tableName&#39;</code><br><strong>COLUMNS表的字段</strong></p>
<ul>
<li>TABLE_CATALOG –数据表登记目录</li>
<li>TABLE_SCHEMA –数据表所属的数据库名</li>
<li>TABLE_NAME –所属的表名称</li>
<li>COLUMN_NAME –列名称</li>
<li>ORDINAL_POSITION –字段再表中的第几列</li>
<li>IS_NULLABLE –字段是否为空</li>
<li>DATA_TYPE –数据类型</li>
<li>CHARACTER_MAXIMUM_LENGTH –字符最大长度</li>
<li>CHARACTER_OCTET_LENGTH</li>
<li>NUMERIC_PRECISION –数据精度</li>
<li>NUMERIC_SCALE –数据规模</li>
<li>CHARACTER_SET_NAME –字符集名称</li>
<li>COLLATION_NAME –字符集校验名称</li>
<li>COLUMN_TYPE –列类型</li>
<li>COLUMN_KEY –关键列[NULL | MUL | PRI]</li>
<li>EXTRA –额外描述[NULL | ON UPDATE | CURRENT_TIMESTAMP | AUTO_INCREMENT]</li>
<li>PRIVILEGES –字段操作权限[select | select, insert, update, references]</li>
<li>COLUMN_COMMENT –字段注释</li>
</ul>
<h3 id="KEY-COLUMN-USAGE表"><a href="#KEY-COLUMN-USAGE表" class="headerlink" title="KEY_COLUMN_USAGE表"></a>KEY_COLUMN_USAGE表</h3><p>具有约束的键列信息。<br>获取表键值：<code>SELECT * FROM information_schema.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA=&#39;databaseName&#39; AND TABLE_NAME=&#39;tableName&#39;</code><br><strong>KEY_COLUMN_USAGE表字段</strong></p>
<ul>
<li>CONSTRAINT_CATALOG –约束登记目录</li>
<li>CONSTRAINT_SCHEMA –约束所属的数据库名</li>
<li>CONSTRAINT_NAME –约束的名称</li>
<li>TABLE_CATALOG –数据表等级目录</li>
<li>TABLE_SCHEMA –键值所属表的所属数据库名（一般与CONSTRAINT_SCHEMA值相同）</li>
<li>TABLE_NAME –键值所属的表名</li>
<li>COLUMN_NAME –键值所属的列名</li>
<li>ORDINAL_POSITION –键值所属的字段在表中第几列。</li>
<li>POSITION_IN_UNIQUE_CONSTRAINT –键值所属的字段在唯一约束的位置（若为外键值为1）</li>
<li>REFERENCED_TABLE_SCHEMA –外键依赖的数据库名（一般与CONSTRAINT_SCHEMA值相同）</li>
<li>REFERENCED_TABLE_NAME –外键依赖的表名</li>
<li>REFERENCED_COLUMN_NAME –外键依赖的列名</li>
</ul>
<h3 id="TABLE-CONSTRAINTS表"><a href="#TABLE-CONSTRAINTS表" class="headerlink" title="TABLE_CONSTRAINTS表"></a>TABLE_CONSTRAINTS表</h3><p>存储了存在约束的表，以及表的约束类型（主键约束，外键约束，唯一约束，check约束）。<br>查看表的约束：<code>SELECT * FROM information_schema.TABLE_CONSTRAINTS WHERE TABLE_SCHEMA=&#39;databaseName&#39; AND TABLE_NAME=&#39;tableName&#39;</code><br><strong>TABLE_CONSTRAINTS表字段</strong></p>
<ul>
<li>CONSTRAINT_CATALOG –约束等级目录</li>
<li>CONSTRAINT_SCHEMA –约束所属的数据库名</li>
<li>CONSTRAINT_NAME –约束的名称</li>
<li>TABLE_SCHEMA –约束依赖表所属的数据库名（一般与CONSTRAINT_SCHEMA值相同）</li>
<li>TABLE_NAME –约束所属的表名</li>
<li>CONSTRAINT_TYPE –约束类型[primary key | foreign key | unique | check]</li>
</ul>
<h3 id="STATISTICS表"><a href="#STATISTICS表" class="headerlink" title="STATISTICS表"></a>STATISTICS表</h3><p>统计表。表索引的信息。<br>查看表的索引：SELECT * FROM information_schema.STATISTICS WHERE TABLE_SCHEMA=’databaseName’ AND TABLE_NAME=’tableName’<br><strong>STATISTICS表字段</strong></p>
<ul>
<li>TABLE_CATALOG –数据表登记目录</li>
<li>TABLE_SCHEMA –索引所属表的数据库名</li>
<li>TABLE_NAME –索引所属的表名</li>
<li>NON_UNIQUE –字段不唯一标识</li>
<li>INDEX_SCHEMA –索引所属的数据库名（一般与TABLE_SCHEMA相同）</li>
<li>SEQ_IN_INDEX</li>
<li>COLUMN_NAME –索引列的列名</li>
<li>COLLATION –校对，列值全显示为A</li>
<li>CARDINALITY –基数（一般与该表的数据行数相同）</li>
<li>SUB_PART</li>
<li>PACKED –是否包装过，默认为NULL</li>
<li>NULLABLE –是否为空[YES | NO]</li>
<li>INDEX_TYPE –索引的类型，列值全显示为BTREE（平衡树索引）</li>
<li>COMMENT –索引注释</li>
</ul>
<p><strong>巧用</strong><br>查看当前数据库的各IP连接数:<br><code>select SUBSTRING_INDEX(host,&#39;:&#39;,1) as ip, count(*) from information_schema.processlist group by ip</code></p>
<h2 id="mysql数据库"><a href="#mysql数据库" class="headerlink" title="mysql数据库"></a>mysql数据库</h2><p>由mysql_install_db脚本初始化权限表。</p>
<h2 id="performance-schema数据库"><a href="#performance-schema数据库" class="headerlink" title="performance_schema数据库"></a>performance_schema数据库</h2><p>数据库的执行。<br>PERFORMANCE_SCHEMA这个功能默认是关闭的。需要设置参数： performance_schema 才可以启动该功能，这个参数是静态参数，只能写在my.cnf 中 不能动态修改。</p>
<h3 id="file-summary-by-event-name-表"><a href="#file-summary-by-event-name-表" class="headerlink" title="file_summary_by_event_name 表"></a>file_summary_by_event_name 表</h3><p><img src="media/15790102300921.jpg" alt="-w1705"><br>图中这一行表示统计的是 redo log 的写入时间，第一列 EVENT_NAME 表示统计的类型<br>接下来的三组数据，显示的是 redo log 操作的时间统计。</p>
<ul>
<li>第一组五列，是所有 IO 类型的统计。其中，COUNT_STAR 是所有 IO 的总次数，接下来四列是具体的统计项， 单位是皮秒；前缀 SUM、MIN、AVG、MAX，顾名思义指的就是总和、最小值、平均值和最大值。</li>
<li>第二组六列，是读操作的统计。最后一列 SUM_NUMBER_OF_BYTES_READ 统计的是，总共从 redo log 里读了多少个字节。</li>
<li>第三组六列，统计的是写操作。</li>
<li>最后的第四组数据，是对其他类型数据的统计。在 redo log 里，你可以认为它们就是对 fsync 的统计。</li>
</ul>
<p>在 performance_schema 库的 file_summary_by_event_name 表里，binlog 对应的是 event_name = “wait/io/file/sql/binlog”这一行。各个字段的统计逻辑，与 redo log 的各个字段完全相同。</p>
<p>可以通过 MAX_TIMER 的值来判断数据库是否出问题了。比如，可以设定阈值，单次 IO 请求时间超过 200 毫秒属于异常，然后使用类似下面这条语句作为检测逻辑。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> event_name,MAX_TIMER_WAIT <span class="keyword">FROM</span> performance_schema.file_summary_by_event_name <span class="keyword">where</span> event_name <span class="keyword">in</span> (<span class="string">'wait/io/file/innodb/innodb_log_file'</span>,<span class="string">'wait/io/file/sql/binlog'</span>) <span class="keyword">and</span> MAX_TIMER_WAIT&gt;<span class="number">200</span>*<span class="number">1000000000</span>;</span><br></pre></td></tr></table></figure>

<h2 id="sys数据库"><a href="#sys数据库" class="headerlink" title="sys数据库"></a>sys数据库</h2><p>sys_config表：系统配置变量</p>
]]></content>
      <categories>
        <category>MySQL越学约年轻</category>
        <category>MySQL元数据</category>
      </categories>
      <tags>
        <tag>MySQL元数据</tag>
      </tags>
  </entry>
  <entry>
    <title>iptables端口封禁</title>
    <url>/year/12/23/iptables%E7%AB%AF%E5%8F%A3%E5%B0%81%E7%A6%81/</url>
    <content><![CDATA[<p>在部署好kms服务并且设置好自启动后，重启系统然后发现重启后，服务在运行但是无法连接激活。 排查了一段时间后发现iptables阻断了连接，因为规则iptables是即时生效，重启后会还原到你设置之前。需要将规则保存下来，并且在开机的时候将保存下来的规则加载。</p>
<h1 id="iptables规则"><a href="#iptables规则" class="headerlink" title="iptables规则"></a>iptables规则</h1><p>语法<br><code>iptables (选项) (参数)</code></p>
<p>选项</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-t&lt;表&gt;：指定要操纵的表；</span><br><span class="line">-A：向规则链中添加条目；</span><br><span class="line">-D：从规则链中删除条目；</span><br><span class="line">-i：向规则链中插入条目；</span><br><span class="line">-R：替换规则链中的条目；</span><br><span class="line">-L：显示规则链中已有的条目；</span><br><span class="line">-F：清楚规则链中已有的条目；</span><br><span class="line">-Z：清空规则链中的数据包计算器和字节计数器；</span><br><span class="line">-N：创建新的用户自定义规则链；</span><br><span class="line">-P：定义规则链中的默认目标；</span><br><span class="line">-h：显示帮助信息；</span><br><span class="line">-p：指定要匹配的数据包协议类型；</span><br><span class="line">-s：指定要匹配的数据包源ip地址；</span><br><span class="line">-j&lt;目标&gt;：指定要跳转的目标；</span><br><span class="line">-i&lt;网络接口&gt;：指定数据包进入本机的网络接口；</span><br><span class="line">-o&lt;网络接口&gt;：指定数据包要离开本机所使用的网络接口。</span><br></pre></td></tr></table></figure>
<h1 id="iptables命令选项输入顺序"><a href="#iptables命令选项输入顺序" class="headerlink" title="iptables命令选项输入顺序"></a>iptables命令选项输入顺序</h1><p>iptables -t 表名 &lt;-A/I/D/R&gt; 规则链名 [规则号] &lt;-i/o 网卡名&gt; -p 协议名 &lt;-s 源IP/源子网&gt; –sport 源端口 &lt;-d 目标IP/目标子网&gt; –dport 目标端口 -j 动作</p>
<h2 id="1-表名包括："><a href="#1-表名包括：" class="headerlink" title="1. 表名包括："></a>1. 表名包括：</h2><ul>
<li>raw：高级功能，如：网址过滤。</li>
<li>mangle：数据包修改（QOS），用于实现服务质量。</li>
<li>net：地址转换，用于网关路由器。</li>
<li>filter：包过滤，用于防火墙规则。</li>
</ul>
<h2 id="2-规则链名包括："><a href="#2-规则链名包括：" class="headerlink" title="2. 规则链名包括："></a>2. 规则链名包括：</h2><ul>
<li>INPUT链：处理输入数据包。</li>
<li>OUTPUT链：处理输出数据包。</li>
<li>PORWARD链：处理转发数据包。</li>
<li>PREROUTING链：用于目标地址转换（DNAT）。</li>
<li>POSTOUTING链：用于源地址转换（SNAT）。</li>
</ul>
<h2 id="3-动作包括："><a href="#3-动作包括：" class="headerlink" title="3. 动作包括："></a>3. 动作包括：</h2><ul>
<li>accept：接收数据包。</li>
<li>DROP：丢弃数据包。</li>
<li>REDIRECT：重定向、映射、透明代理。</li>
<li>SNAT：源地址转换。</li>
<li>DNAT：目标地址转换。</li>
<li>MASQUERADE：IP伪装（NAT），用于ADSL。</li>
<li>LOG：日志记录。</li>
</ul>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><h2 id="清除已有iptables规则"><a href="#清除已有iptables规则" class="headerlink" title="清除已有iptables规则"></a>清除已有iptables规则</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -F</span><br><span class="line">iptables -X</span><br><span class="line">iptables -Z</span><br></pre></td></tr></table></figure>
<h2 id="开放指定的端口"><a href="#开放指定的端口" class="headerlink" title="开放指定的端口"></a>开放指定的端口</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT               #允许本地回环接口(即运行本机访问本机)</span><br><span class="line">iptables -A INPUT -m state -–state ESTABLISHED,RELATED -j ACCEPT    #允许已建立的或相关连的通行</span><br><span class="line">iptables -A OUTPUT -j ACCEPT         #允许所有本机向外的访问</span><br><span class="line">iptables -A INPUT -p tcp -–dport 22 -j ACCEPT    #允许访问22端口</span><br><span class="line">iptables -A INPUT -p tcp -–dport 80 -j ACCEPT    #允许访问80端口</span><br><span class="line">iptables -A INPUT -p tcp -–dport 21 -j ACCEPT    #允许ftp服务的21端口</span><br><span class="line">iptables -A INPUT -p tcp -–dport 20 -j ACCEPT    #允许FTP服务的20端口</span><br><span class="line">iptables -A INPUT -j reject       #禁止其他未允许的规则访问</span><br><span class="line">iptables -A FORWARD -j REJECT     #禁止其他未允许的规则访问</span><br></pre></td></tr></table></figure>
<h2 id="屏蔽IP"><a href="#屏蔽IP" class="headerlink" title="屏蔽IP"></a>屏蔽IP</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -I INPUT -s 123.45.6.7 -j DROP       #屏蔽单个IP的命令</span><br><span class="line">iptables -I INPUT -s 123.0.0.0/8 -j DROP      #封整个段即从123.0.0.1到123.255.255.254的命令</span><br><span class="line">iptables -I INPUT -s 124.45.0.0/16 -j DROP    #封IP段即从123.45.0.1到123.45.255.254的命令</span><br><span class="line">iptables -I INPUT -s 123.45.6.0/24 -j DROP    #封IP段即从123.45.6.1到123.45.6.254的命令</span><br></pre></td></tr></table></figure>
<h2 id="查看已添加的iptables规则"><a href="#查看已添加的iptables规则" class="headerlink" title="查看已添加的iptables规则"></a>查看已添加的iptables规则</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -L -n -v</span><br><span class="line">Chain INPUT (policy DROP 48106 packets, 2690K bytes)</span><br><span class="line">pkts bytes target prot opt in out source destination </span><br><span class="line">5075 589K ACCEPT all -– lo * 0.0.0.0/0 0.0.0.0/0 </span><br><span class="line">191K 90M ACCEPT tcp -– * * 0.0.0.0/0 0.0.0.0/0 tcp dpt:22</span><br><span class="line">1499K 133M ACCEPT tcp -– * * 0.0.0.0/0 0.0.0.0/0 tcp dpt:80</span><br><span class="line">4364K 6351M ACCEPT all -– * * 0.0.0.0/0 0.0.0.0/0 state RELATED,ESTABLISHED</span><br><span class="line">6256 327K ACCEPT icmp -– * * 0.0.0.0/0 0.0.0.0/0</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line">pkts bytes target prot opt in out source destination</span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT 3382K packets, 1819M bytes)</span><br><span class="line">pkts bytes target prot opt in out source destination </span><br><span class="line">5075 589K ACCEPT all -– * lo 0.0.0.0/0 0.0.0.0/0</span><br></pre></td></tr></table></figure>

<h2 id="删除规则"><a href="#删除规则" class="headerlink" title="删除规则"></a>删除规则</h2><p>删除已添加的iptables规则 将所有iptables以序号标记显示，执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -L -n --line-numbers</span><br></pre></td></tr></table></figure>
<p>比如要删除INPUT里序号为8的规则，执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -D INPUT 8</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="备份及恢复iptables规则"><a href="#备份及恢复iptables规则" class="headerlink" title="备份及恢复iptables规则"></a>备份及恢复iptables规则</h2><p>每次修改完规则后，都需要使用下面这个命令将当前规则从内存保存到文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables-save &gt; /root/iptables.conf</span><br></pre></td></tr></table></figure>
<p>文件位置根据需要可以改。 重启后使用下面这个命令恢复。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables-restore &lt; /root/iptables.conf</span><br></pre></td></tr></table></figure>
<p>要设置开机自动恢复，在/etc/rc.d/rc.local文件末尾添加上面的恢复命令即可。</p>
]]></content>
      <categories>
        <category>操作系统的学习</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>清理缓存</title>
    <url>/year/12/06/%E6%B8%85%E7%90%86%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h1 id="drop-caches"><a href="#drop-caches" class="headerlink" title="drop_caches"></a>drop_caches</h1><p>Linux Kernel 2.6.16之后的内核提供了一个设置内核抛弃 页缓存 和/或 目录(dentry)和索引节点（inode）缓存，这样可以释放出大量内存。</p>
<ul>
<li>释放缓存页<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo 1 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure></li>
<li>释放目录和索引节点缓存（inode and dentry cache）<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo 2 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure></li>
<li>同时释放 页、目录、索引节点缓存：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo 3 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure>
上述操作是无害的操作，并且智慧释放完全没有使用的内存对象。脏对象（dirty objects）将继续被使用直到它们被写入到磁盘中，所以内存脏对象不会被释放。不过，如果在执行drop_caches之前执行sync指令，则会将脏对象刷新到磁盘中，这样drop_caches操作会释放出更多内存。</li>
</ul>
<p>注意：drop_caches需要花费一些时间（在终端中可以看到大约几十秒时间），此时再次使用cat /proc/buddyinfo可以看到立即出现了大量高阶内存页。</p>
<p>但是drop_caches这个触发动作是一次性的，也就是说，并不因为<code>cat /proc/sys/vm/drop_caches</code>时显示输出内容是3就表示系统不缓存内容。相反，一旦完成drop_caches，系统立即自动对后续内存对象进行缓存。所以要再次触发缓存清理，需要再次执行<code>echo 3 &gt; /proc/sys/vm/drop_caches</code>。</p>
<blockquote>
<p>如果重复<code>echo 3 &gt; /proc/sys/vm/drop_caches</code>不能再次释放缓存，可以先尝试<code>echo 0 &gt; /proc/sys/vm/drop_caches</code>然后再执行<code>echo 3 &gt; /proc/sys/vm/drop_caches</code>。</p>
</blockquote>
]]></content>
      <categories>
        <category>操作系统的学习</category>
      </categories>
      <tags>
        <tag>内存</tag>
      </tags>
  </entry>
  <entry>
    <title>ghost改表</title>
    <url>/year/11/20/ghost%E6%94%B9%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="ghost-改表的原理"><a href="#ghost-改表的原理" class="headerlink" title="ghost 改表的原理"></a>ghost 改表的原理</h1><h2 id="工作模式及流程"><a href="#工作模式及流程" class="headerlink" title="工作模式及流程"></a>工作模式及流程</h2><p><img src="https://static001.infoq.cn/resource/image/41/e7/4161fbb2207c55d8d5c735b2951155e7.png" alt="ghost 数据流"></p>
<h3 id="initial-set-up-amp-amp-validation"><a href="#initial-set-up-amp-amp-validation" class="headerlink" title="initial set up &amp;&amp; validation"></a>initial set up &amp;&amp; validation</h3><ol>
<li><p>连接到从库或主库，确定主库身份</p>
</li>
<li><p>提前验证alter语句</p>
</li>
<li><p>验证权限和要修改表的存在性</p>
</li>
<li><p>创建changelog和ghost表</p>
</li>
<li><p>应用alter到ghost表</p>
</li>
<li><p>比较original table和ghost table的结构，在共享列中寻找共享的unique key column，验证外键的情况。选择合适的unique key column（一般就是主键，无主键一般选择非空唯一key的column），这是将来chunk the table过程的关键。</p>
</li>
<li><p>设置binlog的侦听器，开始监听产生更新的binlog日志事件。</p>
</li>
<li><p>向changelog表中注入”good to go” 条目（侦听binlog 的via）</p>
</li>
<li><p>开始linstening binlog中对orginnal table的DML操作</p>
</li>
<li><p>读orginnal table，选择上述关键key的最大值和最小值</p>
</li>
<li><p>频繁的写到change log</p>
<h3 id="copy-flow"><a href="#copy-flow" class="headerlink" title="copy flow"></a>copy flow</h3><blockquote>
<p>这部分包含多个活跃的模块，所有的模块都是彼此协调并发执行的。</p>
</blockquote>
</li>
<li><p>设置心跳机制：频繁的写到changelog table（我们认为这种操作代价极小，可以忽略其对负载节流的影响）。</p>
</li>
<li><p>不断更新status</p>
</li>
<li><p>定期的去检查当前我们设置的节流场景或者提示，一旦发生便出发节流操作。</p>
</li>
<li><p>chunk by chunk的派对copy orginnal table 的数据到ghost table</p>
</li>
<li><p>阅读binlog DML事件，派对应用的ghost表中</p>
</li>
<li><p>没有触发节流的情况下不断的处理copy tasks queue 和apply tasks queue 并顺序应用到ghost表。触发节流限制就suspend</p>
</li>
<li><p>当完整的一次row-copy结束后，输出<code>copy all done</code>到changelog</p>
</li>
<li><p>当postpone-cut-over-flag-file存在时，退出cut over的执行，保持不断对DML操作的apply</p>
<h3 id="cut-over-and-completion"><a href="#cut-over-and-completion" class="headerlink" title="cut-over and completion"></a>cut-over and completion</h3></li>
<li><p>对original表加写锁，保持对于binlog event 的监听获取DML。在copy all done和lock original table是异步执行的非原子操作，所以这中间就存在时间缝隙，随意尽管originl被lock了，但在这个时间缝隙阶段必须保持对original table 上binlog的listening。</p>
</li>
<li><p>swapping orginnal table 和ghost table</p>
</li>
<li><p>cleanup，收尾阶段，这种实现的方式收尾阶段需要“打扫”的对象很少，主要就是关闭监听，drop 遗留的table。</p>
<h4 id="cut-over-step"><a href="#cut-over-step" class="headerlink" title="cut-over step"></a>cut-over step</h4></li>
</ol>
<ul>
<li>对于migration来说cut-over是最主要的步骤，在某个时刻隐式的完成original table和ghost table的切换。</li>
<li>MySQL对表的交换有一定的局限性。虽然支持原子操作，但不允许在一个lock下完成交换操作。</li>
<li>fackbook的工具OSC文档在“Cut-over phase”节中证明了这一点。fackbook采用了非原子操作：原表被push aside，然后新表被重命名取代原表。在这两者之间的时间间隙中，表是不存在的，查询会失败（虽然原理上时间应该很短，但确实不存在）</li>
<li>gh通过使用原子的，两步阻断来解决这个问题。当一个链接持有锁，另一个尝试去原子的rename。The RENAME is guaranteed to not be executed prematurely by positioning a sentry table which blocks the RENAME operation until gh-ost is satisfied all is in order.（这段翻译吃力啊！！！）</li>
<li>执行成功，表交换为原子操作的，connections被blocks一段时间；</li>
<li>如果由于超时或者其他原因而失败了，这种情况下，自然返回到pre-cut-over阶段，original始终保持可访问的。。这会释放pending connections，表再次可写直到下一次attempt cut-over。</li>
<li>命令行参数–cut-over被支持，默认采用的算法是上述描述的原子操作，也支持twp-step操作，使用FB的非原子算法。推荐使用默认的算法，这在生产环境进行了充分的测试。<h2 id="参数含义"><a href="#参数含义" class="headerlink" title="参数含义"></a>参数含义</h2><a href="https://github.com/wing324/helloworld_zh/blob/master/MySQL/gh-ost/GitHub%E5%BC%80%E6%BA%90MySQL%20Online%20DDL%E5%B7%A5%E5%85%B7gh-ost%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90.md" target="_blank" rel="noopener">GitHub开源MySQL Online DDL工具gh-ost参数解析</a></li>
</ul>
]]></content>
      <categories>
        <category>MySQL越学约年轻</category>
        <category>pt工具的研究</category>
      </categories>
  </entry>
  <entry>
    <title>并行复制</title>
    <url>/year/11/20/%E5%B9%B6%E8%A1%8C%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<h1 id="并行复制"><a href="#并行复制" class="headerlink" title="并行复制"></a>并行复制</h1><h2 id="并行复制的流程"><a href="#并行复制的流程" class="headerlink" title="并行复制的流程"></a>并行复制的流程</h2><h3 id="group-commit的过程："><a href="#group-commit的过程：" class="headerlink" title="group commit的过程："></a>group commit的过程：</h3><ol>
<li>binlog prepare</li>
<li>InnoDB prepare</li>
<li>binlog commit(ordered commit)<pre><code>--3.1 Stage #1: flushing transactions to binary log
--3.2 Stage #2: Syncing binary log file to disk
--3.3 Stage #3: Commit all transactions in order.</code></pre></li>
<li>InnoDB commit<h4 id="ordered-commit-的过程"><a href="#ordered-commit-的过程" class="headerlink" title="ordered commit 的过程"></a>ordered commit 的过程</h4></li>
<li>由leader线程帮助FLUSH队列中的线程完成flush binlog操作，</li>
<li>由leader线程帮助SYNC队列中的线程完成sync binlog操作，</li>
</ol>
<p>为了表示主库并行度，在binlog row event增加了如下的标识：</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">#<span class="number">160807</span> <span class="number">15</span>:<span class="number">48</span>:<span class="number">10</span> server id <span class="number">100</span>  end_log_pos <span class="number">739</span> <span class="symbol">CRC32</span> <span class="number">0x2237b2ef</span>        <span class="symbol">GTID</span>    last_committed=<span class="number">0</span>        sequence_number=<span class="number">3</span></span><br><span class="line"><span class="symbol">SET</span> @@<span class="symbol">SESSION</span>.<span class="symbol">GTID_NEXT</span>= <span class="string">'8108dc48-47de-11e6-8690-a0d3c1f20ae4:3'</span><span class="comment">/*!*/</span>;</span><br></pre></td></tr></table></figure>

<h2 id="last-committed-amp-amp-sequence-number"><a href="#last-committed-amp-amp-sequence-number" class="headerlink" title="last_committed&amp;&amp;sequence_number"></a>last_committed&amp;&amp;sequence_number</h2><h3 id="1-sequence-number"><a href="#1-sequence-number" class="headerlink" title="1. sequence_number"></a>1. sequence_number</h3><p>事务中的sequence_number是一个全局有序递增的数字，每个事务递增1，来源mysql_bin_log.tranaction_counter.step()<br>和gtid一对一的关系，即在flush阶段，和gtid生成的时机一致</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">binlog_cache_data::flush</span><br><span class="line">&#123;   </span><br><span class="line">     <span class="keyword">if</span> (flags.finalized) &#123;</span><br><span class="line">       Transaction_ctx *trn_ctx= thd-&gt;get_transaction();</span><br><span class="line">       trn_ctx-&gt;sequence_number= mysql_bin_log.transaction_counter.step();</span><br><span class="line">     &#125;</span><br><span class="line">     .......</span><br><span class="line">     mysql_bin_log.write_gtid(thd, <span class="keyword">this</span>, &amp;writer)))</span><br><span class="line">     mysql_bin_log.write_cache(thd, <span class="keyword">this</span>, &amp;writer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-last-committed"><a href="#2-last-committed" class="headerlink" title="2. last_committed"></a>2. last_committed</h3><p>事务中last_committed表示在这个commit下的事务，都是可以并行的，即没有冲突， Transaction_ctx中的last_committed在每个语句prepared的时候进行初始化，来源mysql_bin_log.max_committed_transaction</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binlog_prepare</span><span class="params">(handlerton *hton, THD *thd, <span class="keyword">bool</span> all)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    Logical_clock&amp; clock= mysql_bin_log.max_committed_transaction;</span><br><span class="line">    thd-&gt;get_transaction()-&gt;</span><br><span class="line">      store_commit_parent(clock.get_timestamp());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>/ * Binlog特定的逻辑时间戳。<em>/<br>/</em><br>存储事务的提交父序列号。<br>该值使用“父”事务指定此事务依赖项。<br>当事务将要在binlog中提交到最后提交的事务的sequence_number的值时，将分配该成员。<br>无论是否轮换二进制日志还是以多个部分记录事务，这个和last_committed数字都会保持不变。<br> 但是，二进制日志的记录器可以根据其规范进行转换。<br> */</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Binlog-specific logical timestamps. */</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Store for the transaction's commit parent sequence_number.</span></span><br><span class="line"><span class="comment">    The value specifies this transaction dependency with a "parent" transaction.</span></span><br><span class="line"><span class="comment">    The member is assigned, when the transaction is about to commit in binlog to a value of the last committed transaction's sequence_number.</span></span><br><span class="line"><span class="comment">    This and last_committed as numbers are kept ever incremented regardless of binary logs being rotated or when transaction is logged in multiple pieces.</span></span><br><span class="line"><span class="comment">    However the logger to the binary log may convert them according to its specification.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  int64 last_committed;</span><br></pre></td></tr></table></figure>
<p>而mysql_bin_log.max_committed_transaction的更新是在group commit提交的时候进行变更。</p>
]]></content>
      <categories>
        <category>MySQL越学约年轻</category>
        <category>复制相关</category>
      </categories>
      <tags>
        <tag>并行复制</tag>
      </tags>
  </entry>
  <entry>
    <title>git 手册</title>
    <url>/year/11/20/git-%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="git-强行pull并覆盖本地的一切"><a href="#git-强行pull并覆盖本地的一切" class="headerlink" title="git - 强行pull并覆盖本地的一切"></a>git - 强行pull并覆盖本地的一切</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch origin master</span><br><span class="line">git reset --hard FETCH_HEAD</span><br><span class="line">git clean -df</span><br></pre></td></tr></table></figure>
<blockquote>
<p>fetch origin master是拉取远端的提交。<br>然后reset –hard FETCH_HEAD就是把当前分支重置到刚刚拉取下来的远端的头。任何修改都以远端为准。<br>最后可能会残留一些本地新建的文件，所以再用clean -df清除所有本地的不相关的文件和文件夹，一切就OK了。</p>
</blockquote>
<h2 id="git-回滚单个文件"><a href="#git-回滚单个文件" class="headerlink" title="git 回滚单个文件"></a>git 回滚单个文件</h2><ol>
<li>cd 到需要回滚代码的目录下（eg：回滚代码文件为main.py）</li>
<li>执行<code>git log main.py</code>  执行后会看到<br><img src="evernotecid://216F89DB-28B4-424D-862C-D183D3A7E3B8/appyinxiangcom/16534076/ENResource/p2261" alt="9c61b6e607d935813f41325804b10717.png"></li>
<li>git checkout b1ae1eb19fd026c61b3fa9167ba2d66b34f76015 main_handle.py</li>
<li>提交代码并push</li>
</ol>
<h2 id="使用git-stash命令保存和恢复进度"><a href="#使用git-stash命令保存和恢复进度" class="headerlink" title="使用git stash命令保存和恢复进度"></a>使用git stash命令保存和恢复进度</h2><h3 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h3><p>保存当前工作进度，会把暂存区和工作区的改动保存起来。执行完这个命令后，在运行git status命令，就会发现当前是一个干净的工作区，没有任何改动。使用git stash save ‘message…’可以添加一些注释</p>
<h3 id="git-stash-list"><a href="#git-stash-list" class="headerlink" title="git stash list"></a>git stash list</h3><p>显示保存进度的列表。也就意味着，git stash命令可以多次执行。</p>
<h3 id="git-stash-pop-–index-stash-id"><a href="#git-stash-pop-–index-stash-id" class="headerlink" title="git stash pop [–index] [stash_id]"></a>git stash pop [–index] [stash_id]</h3><ul>
<li><code>git stash pop</code> 恢复最新的进度到工作区。git默认会把工作区和暂存区的改动都恢复到工作区。</li>
<li><code>git stash pop --index</code> 恢复最新的进度到工作区和暂存区。（尝试将原来暂存区的改动还恢复到暂存区）</li>
<li><code>git stash pop stash@{1}</code>恢复指定的进度到工作区。stash_id是通过<code>git stash list</code>命令得到的<br>通过<code>git stash pop</code>命令恢复进度后，会删除当前进度。<h3 id="git-stash-apply-–index-stash-id"><a href="#git-stash-apply-–index-stash-id" class="headerlink" title="git stash apply [–index] [stash_id]"></a>git stash apply [–index] [stash_id]</h3>除了不删除恢复的进度之外，其余和git stash pop 命令一样。</li>
</ul>
<h3 id="git-stash-drop-stash-id"><a href="#git-stash-drop-stash-id" class="headerlink" title="git stash drop [stash_id]"></a>git stash drop [stash_id]</h3><p>删除一个存储的进度。如果不指定stash_id，则默认删除最新的存储进度。</p>
<h3 id="git-stash-clear"><a href="#git-stash-clear" class="headerlink" title="git stash clear"></a>git stash clear</h3><p>删除所有存储的进度。</p>
]]></content>
      <categories>
        <category>git学习</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/year/11/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
