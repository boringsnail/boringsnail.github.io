[{"title":"并行复制","url":"/2019/11/20/%E5%B9%B6%E8%A1%8C%E5%A4%8D%E5%88%B6/","content":"<h1 id=\"并行复制\"><a href=\"#并行复制\" class=\"headerlink\" title=\"并行复制\"></a>并行复制</h1><h2 id=\"并行复制的流程\"><a href=\"#并行复制的流程\" class=\"headerlink\" title=\"并行复制的流程\"></a>并行复制的流程</h2><h3 id=\"group-commit的过程：\"><a href=\"#group-commit的过程：\" class=\"headerlink\" title=\"group commit的过程：\"></a>group commit的过程：</h3><ol>\n<li>binlog prepare</li>\n<li>InnoDB prepare</li>\n<li>binlog commit(ordered commit)<pre><code>--3.1 Stage #1: flushing transactions to binary log\n--3.2 Stage #2: Syncing binary log file to disk\n--3.3 Stage #3: Commit all transactions in order.</code></pre></li>\n<li>InnoDB commit<h4 id=\"ordered-commit-的过程\"><a href=\"#ordered-commit-的过程\" class=\"headerlink\" title=\"ordered commit 的过程\"></a>ordered commit 的过程</h4></li>\n<li>由leader线程帮助FLUSH队列中的线程完成flush binlog操作，</li>\n<li>由leader线程帮助SYNC队列中的线程完成sync binlog操作，</li>\n</ol>\n<p>为了表示主库并行度，在binlog row event增加了如下的标识：</p>\n<figure class=\"highlight prolog\"><table><tr><td class=\"code\"><pre><span class=\"line\">#<span class=\"number\">160807</span> <span class=\"number\">15</span>:<span class=\"number\">48</span>:<span class=\"number\">10</span> server id <span class=\"number\">100</span>  end_log_pos <span class=\"number\">739</span> <span class=\"symbol\">CRC32</span> <span class=\"number\">0x2237b2ef</span>        <span class=\"symbol\">GTID</span>    last_committed=<span class=\"number\">0</span>        sequence_number=<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"symbol\">SET</span> @@<span class=\"symbol\">SESSION</span>.<span class=\"symbol\">GTID_NEXT</span>= <span class=\"string\">'8108dc48-47de-11e6-8690-a0d3c1f20ae4:3'</span><span class=\"comment\">/*!*/</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"last-committed-amp-amp-sequence-number\"><a href=\"#last-committed-amp-amp-sequence-number\" class=\"headerlink\" title=\"last_committed&amp;&amp;sequence_number\"></a>last_committed&amp;&amp;sequence_number</h2><h3 id=\"1-sequence-number\"><a href=\"#1-sequence-number\" class=\"headerlink\" title=\"1. sequence_number\"></a>1. sequence_number</h3><p>事务中的sequence_number是一个全局有序递增的数字，每个事务递增1，来源mysql_bin_log.tranaction_counter.step()<br>和gtid一对一的关系，即在flush阶段，和gtid生成的时机一致</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">binlog_cache_data::flush</span><br><span class=\"line\">&#123;   </span><br><span class=\"line\">     <span class=\"keyword\">if</span> (flags.finalized) &#123;</span><br><span class=\"line\">       Transaction_ctx *trn_ctx= thd-&gt;get_transaction();</span><br><span class=\"line\">       trn_ctx-&gt;sequence_number= mysql_bin_log.transaction_counter.step();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     .......</span><br><span class=\"line\">     mysql_bin_log.write_gtid(thd, <span class=\"keyword\">this</span>, &amp;writer)))</span><br><span class=\"line\">     mysql_bin_log.write_cache(thd, <span class=\"keyword\">this</span>, &amp;writer);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-last-committed\"><a href=\"#2-last-committed\" class=\"headerlink\" title=\"2. last_committed\"></a>2. last_committed</h3><p>事务中last_committed表示在这个commit下的事务，都是可以并行的，即没有冲突， Transaction_ctx中的last_committed在每个语句prepared的时候进行初始化，来源mysql_bin_log.max_committed_transaction</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">binlog_prepare</span><span class=\"params\">(handlerton *hton, THD *thd, <span class=\"keyword\">bool</span> all)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    Logical_clock&amp; clock= mysql_bin_log.max_committed_transaction;</span><br><span class=\"line\">    thd-&gt;get_transaction()-&gt;</span><br><span class=\"line\">      store_commit_parent(clock.get_timestamp());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>/ * Binlog特定的逻辑时间戳。<em>/<br>/</em><br>存储事务的提交父序列号。<br>该值使用“父”事务指定此事务依赖项。<br>当事务将要在binlog中提交到最后提交的事务的sequence_number的值时，将分配该成员。<br>无论是否轮换二进制日志还是以多个部分记录事务，这个和last_committed数字都会保持不变。<br> 但是，二进制日志的记录器可以根据其规范进行转换。<br> */</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Binlog-specific logical timestamps. */</span></span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    Store for the transaction's commit parent sequence_number.</span></span><br><span class=\"line\"><span class=\"comment\">    The value specifies this transaction dependency with a \"parent\" transaction.</span></span><br><span class=\"line\"><span class=\"comment\">    The member is assigned, when the transaction is about to commit in binlog to a value of the last committed transaction's sequence_number.</span></span><br><span class=\"line\"><span class=\"comment\">    This and last_committed as numbers are kept ever incremented regardless of binary logs being rotated or when transaction is logged in multiple pieces.</span></span><br><span class=\"line\"><span class=\"comment\">    However the logger to the binary log may convert them according to its specification.</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  int64 last_committed;</span><br></pre></td></tr></table></figure>\n<p>而mysql_bin_log.max_committed_transaction的更新是在group commit提交的时候进行变更。</p>\n","categories":["MySQL 数据库"],"tags":["并行复制"]},{"title":"git 手册","url":"/2019/11/20/git-%E6%89%8B%E5%86%8C/","content":"<h1 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h1><h2 id=\"git-强行pull并覆盖本地的一切\"><a href=\"#git-强行pull并覆盖本地的一切\" class=\"headerlink\" title=\"git - 强行pull并覆盖本地的一切\"></a>git - 强行pull并覆盖本地的一切</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git fetch origin master</span><br><span class=\"line\">git reset --hard FETCH_HEAD</span><br><span class=\"line\">git clean -df</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>fetch origin master是拉取远端的提交。<br>然后reset –hard FETCH_HEAD就是把当前分支重置到刚刚拉取下来的远端的头。任何修改都以远端为准。<br>最后可能会残留一些本地新建的文件，所以再用clean -df清除所有本地的不相关的文件和文件夹，一切就OK了。</p>\n</blockquote>\n<h2 id=\"git-回滚单个文件\"><a href=\"#git-回滚单个文件\" class=\"headerlink\" title=\"git 回滚单个文件\"></a>git 回滚单个文件</h2><ol>\n<li>cd 到需要回滚代码的目录下（eg：回滚代码文件为main.py）</li>\n<li>执行<code>git log main.py</code>  执行后会看到<br><img src=\"evernotecid://216F89DB-28B4-424D-862C-D183D3A7E3B8/appyinxiangcom/16534076/ENResource/p2261\" alt=\"9c61b6e607d935813f41325804b10717.png\"></li>\n<li>git checkout b1ae1eb19fd026c61b3fa9167ba2d66b34f76015 main_handle.py</li>\n<li>提交代码并push</li>\n</ol>\n<h2 id=\"使用git-stash命令保存和恢复进度\"><a href=\"#使用git-stash命令保存和恢复进度\" class=\"headerlink\" title=\"使用git stash命令保存和恢复进度\"></a>使用git stash命令保存和恢复进度</h2><h3 id=\"git-stash\"><a href=\"#git-stash\" class=\"headerlink\" title=\"git stash\"></a>git stash</h3><p>保存当前工作进度，会把暂存区和工作区的改动保存起来。执行完这个命令后，在运行git status命令，就会发现当前是一个干净的工作区，没有任何改动。使用git stash save ‘message…’可以添加一些注释</p>\n<h3 id=\"git-stash-list\"><a href=\"#git-stash-list\" class=\"headerlink\" title=\"git stash list\"></a>git stash list</h3><p>显示保存进度的列表。也就意味着，git stash命令可以多次执行。</p>\n<h3 id=\"git-stash-pop-–index-stash-id\"><a href=\"#git-stash-pop-–index-stash-id\" class=\"headerlink\" title=\"git stash pop [–index] [stash_id]\"></a>git stash pop [–index] [stash_id]</h3><ul>\n<li><code>git stash pop</code> 恢复最新的进度到工作区。git默认会把工作区和暂存区的改动都恢复到工作区。</li>\n<li><code>git stash pop --index</code> 恢复最新的进度到工作区和暂存区。（尝试将原来暂存区的改动还恢复到暂存区）</li>\n<li><code>git stash pop stash@{1}</code>恢复指定的进度到工作区。stash_id是通过<code>git stash list</code>命令得到的<br>通过<code>git stash pop</code>命令恢复进度后，会删除当前进度。<h3 id=\"git-stash-apply-–index-stash-id\"><a href=\"#git-stash-apply-–index-stash-id\" class=\"headerlink\" title=\"git stash apply [–index] [stash_id]\"></a>git stash apply [–index] [stash_id]</h3>除了不删除恢复的进度之外，其余和git stash pop 命令一样。</li>\n</ul>\n<h3 id=\"git-stash-drop-stash-id\"><a href=\"#git-stash-drop-stash-id\" class=\"headerlink\" title=\"git stash drop [stash_id]\"></a>git stash drop [stash_id]</h3><p>删除一个存储的进度。如果不指定stash_id，则默认删除最新的存储进度。</p>\n<h3 id=\"git-stash-clear\"><a href=\"#git-stash-clear\" class=\"headerlink\" title=\"git stash clear\"></a>git stash clear</h3><p>删除所有存储的进度。</p>\n","categories":["git学习"],"tags":["git"]},{"title":"Hello World","url":"/2019/11/15/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"}]